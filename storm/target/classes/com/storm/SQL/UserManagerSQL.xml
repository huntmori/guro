<?xml version="1.0" encoding="UTF-8"?>
<!-- 	xml 파일이 되기 위해서는 
		1.	Header 가 존재해야 하고
		2.	root 태그가 존재해야 한다.
		참고로	xml 파일에 특정 태그만 기록하기 위해서는
		DTD, 스키마 선언이 되어야 한다.
-->
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="userManager">
	<!-- 	질의 명령을 만들때 자주 사용되는 내용은 한번만 만들어서 재 사용할 수 있다. 
			방법
				1.	자주 사용되는 내용을 기록해 놓는다.
					<sql id="적당한값">
						자주 사용되는 내용.....
					</sql>
				
				2.	자주 사용되는 내용을 재 사용할 위치에서
					<include refid="적당한값" />		
			
	-->
	<!-- 	주의 사항
			재 사용이란? 이 내용이 필요한 위치에 그대로 복사된다는 의미이므로
			
			모든 곳에서 공통으로 사용할 모든 내용이 포함되어 있어야 한다.
			
			예>			WHERE
							isShow= '1'
							AND	ab_no = #{orino}
							
			예>			WHERE
							isShow='1'
	-->
	<sql id="selectField">
		user_key					AS user_key,
		user_email				AS user_email,
		user_nickname			AS user_nickname,
		user_password			AS user_password,
		user_enable				AS user_enable
	</sql>

	<!-- 	목록 꺼내기 질의 명령 -->
	<select id="userList"	parameterType="hMap"		resultType="umVO">
	<!-- 
		resultType은 ArrayList로 받으면 안된다.
		왜냐하면 조건의 따라서 여러줄이 나올수도 있지만 한줄만 나올수도 있다.
		
		★★★
		그래서 myBatis에서 resultType은 결과의 줄수는 생각하지 말고
		한줄의 데이터를 어떻게 받을지를 고민하면 된다.
		
		VO로 결과를 받도록 하는 경우에는 결과물의 데이터를 기억할 수 있는
		setXxx()가 VO에 준비되어야 한다.
	-->
		select
			<include refid="selectField" />
		from
			user_table
        order by user_key
	</select>
	<!-- 	페이지 정보를 구하기 위한 총 데이터 개수 구하기 질의 -->
	<select id="getTotal"		resultType="int">
		select
			count(*)
		from
			user_table
	</select>
	<!-- 	상세보기 질의 명령 -->
	<select id="userView"	parameterType="int"		resultType="umVO">
		select
			<include refid="selectField" />
		from
			user_table
		WHERE
			user_key = #{userKey}
	</select>

	<select id="searchUser"	resultType="umVO"	parameterType="hMap">
		select
			<include refid="selectField" />
		from
			user_table
		where
			<!-- 	조건은 5가지 경우에 따라서 달라지며
					어디서 검색할지는 kind라는 변수에 기억되어 있다.
			-->			
			<if test="kind eq 'user_key'">
				user_key LIKE '%' || #{word} || '%'
			</if>
			<if test="kind eq 'user_email'">
				user_email LIKE '%' || #{word} || '%'
			</if>
			<if test="kind eq 'user_nickname'">
			    user_nickname LIKE '%' || #{word} || '%'
			</if>
			<if test="kind eq 'user_password'">
				user_password LIKE '%#' || #{word} || '#%'
			</if>
			<if test="kind eq 'user_enable'">
				user_enable LIKE '%#' || #{word} || '#%'
			</if>
	</select>
	
	<!-- 	게시물 수정을 위한 Query 명령 
	
			이 경우는 수정될 수도 있고, 수정이 되지 않을 수도 있다.
			
			JDBC에서는 update, delete 질의 명령을 실행하면 변화된 데이터의 
			개수를 알려줄 수 있다.
			
			우리로 말하면
			수정되면			결과가 	1
			수정되지 않으면	결과가 	0
			
			이것을 이용해서 수정 결과를 알 수 있다.
	-->
	<update id="updateUser"	parameterType="umVO">
		update
			user_table
		set
			user_email 		= #{user_email},
			user_nickname = #{user_nickname}
		where		
			user_key = #{userKey}
	</update>
	
	<!-- 	삭제를 위한 Query 명령 -->
	<update id="deleteUser"	parameterType="umVO">
		update
			user_table
		set
			user_enable = decode(user_enable,'Y','N','N','Y','Y')
		where
			user_key = #{userKey}
	</update>
</mapper>